{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","key","find","n","changeNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20bdab4a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'this note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br/>\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changeNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changeNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote ))\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show { showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) =>\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} placeholder='a new note.' />\n          <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport App from './App'\nReactDOM.render(<App />, document.getElementById('root')\n)\n\n\n\n"],"sourceRoot":""}