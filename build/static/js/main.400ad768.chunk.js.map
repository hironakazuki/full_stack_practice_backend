{"version":3,"sources":["components/Note.js","components/Notification.js","components/LoginForm.js","components/NoteForm.js","components/Togglable.js","components/Footer.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","id","value","onChange","type","NoteForm","createNote","useState","newNote","setNewNote","event","preventDefault","target","placeholder","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","buttonLabel","children","displayName","Footer","color","fontStyle","fontSize","token","setToken","newToken","getAll","axios","get","then","response","data","create","newObject","a","config","headers","authorization","post","update","put","login","credentials","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","console","log","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","noteObject","noteFormRef","current","returnedNote","concat","handleLogin","loginService","setItem","stringify","setTimeout","createRef","notesToShow","filter","name","map","key","find","n","changeNote","catch","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.400ad768.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      <span>{note.content}</span>\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","\nimport React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password\n}) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            id=\"username\"\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button id=\"login-button\" type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n\nexport default LoginForm","import React, { useState } from 'react'\n\nconst NoteForm = ({ createNote }) => {\n  const [newNote, setNewNote] = useState('')\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    createNote({\n      content:newNote,\n      important: false\n    })\n\n    setNewNote('')\n  }\n  return (\n    <div>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={addNote}>\n        <input\n          id=\"content\"\n          value={newNote}\n          onChange={handleChange}\n          placeholder='a new note.'\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NoteForm","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  Togglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n  }\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\" >\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nexport default Footer","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  // const nonExisting = {\n  //   id: 10000,\n  //   content: 'this note is not saved to server',\n  //   date: '2019-05-30T17:30:31.098Z',\n  //   important: true,\n  // }\n  return request.then(response => response.data)\n  // return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { authorization: token },\n  }\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { setToken, getAll, create, update }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport NoteForm from './components/NoteForm'\nimport Togglable from './components/Togglable'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const addNote = (noteObject) => {\n    noteFormRef.current.toggleVisibility()\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changeNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changeNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(() => {\n        setErrorMessage(\n          `Note '${note.content}' was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    console.log('logging in with', username, password)\n\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => {\n    return(\n      <Togglable buttonLabel='login'>\n        <LoginForm\n          username={username}\n          password={password}\n          handleUsernameChange={({ target }) => setUsername(target.value)}\n          handlePasswordChange={({ target }) => setPassword(target.value)}\n          handleSubmit={handleLogin}\n        />\n      </Togglable>\n    )\n  }\n\n  const noteFormRef = React.createRef()\n\n  const noteForm = () => (\n    <Togglable buttonLabel=\"new note\" ref={noteFormRef}>\n      <NoteForm createNote={addNote} />\n    </Togglable>\n  )\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      {user === null ?\n        loginForm() :\n        <div>\n          <p>{user.name} logged in</p>\n          {noteForm()}\n        </div>\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show { showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport App from './App'\nReactDOM.render(<App />, document.getElementById('root')\n)\n\n\n\n"],"sourceRoot":""}